Section 1.

C# = general purpose OOP, relased by MS in 2002.
C# = compiled language, strongly typed, .NET language.

 ________                _______________                   ________
|  C#    |              | Common         |               | Machine  |
| source |  ---->       | Intermediate   |      ---->    | Code     |
|________|              | Language       |               |__________|

Allowed to use any language that is compiled to CIL (VB.net, F# etc).

$ dotnet new console -> Program.cs + cs.proj
(All modern .net applications start with Program.cs).

First C# application
using System;

class Program
{
  static void Main(string[] args) <----Execution starts here.
  {
    Console.WriteLine("Hello World!");
  }

}
Need to do $ dotnet restore before first run/when dependencies change.
$dotnet run to start.

Extended program
class Program
{
  static void Main(string[] args) <----Execution starts here.
  {
    Console.WriteLine("Type a message!");
    Console.WriteLine("You said " +console.readLine());
  }

}

Variables in C#.

using System;
class Program
{
  static void Main(string[] args)
  {
    Console.WriteLine("What is the name of your band?");
    string name = Console.ReadLine();
    Console.WriteLine("How many members are in your band?");
    int numberOfMembers = int.Parse(console.ReadLine());
    Console.WriteLine($"{name} and has {numberOfMembers}
    number of members"");
  }
}

Storing variable = setting/asigning.
Getting value from variable = getting.

Level 3 conditionals in C#.
int.tryParse returns true or false depending on if it was able to parse string to
int.

output parameters = allows setting of variables using keyword out.

static void Main(string[] args)
{
  Console.WriteLine("What is the name of your band?");
  string name = Console.ReadLine();
  Console.WriteLine("How many people are in your band?")
  int numberOfMembers = 0;
  if(!int.tryParse(Console.ReadLine(), out numberOfMembers))
  {
    Console.WriteLine("Input was not valid!");
    Environment.Exit(0);
  }
  Console.WriteLine($"{name} has ${numberOfMembers} members");
}

Methods

Methods = method for breaking up code into logical parts.
Convention, method names use PascalCase.
parameter names typically uses camelCase.
void keyword used for specifying that method does not return anything.

First program with Method.
class program
{
  static void Main(string[] args)
  {
    Console.WriteLine("What is the name of your band");
    string name = Console.readLine();
    AnnounceBand(name);
  }
  void AnnounceBand(string bandName)
  {
    Console.WriteLine($"Welcome {bandName} to the stage");
  }
}
Level 2.

Class = blueprint for instance.
Objeect = actual instance of class.

Classes in C# defined by writing

class clasName
{

}

common practice in C# to name file after class it contains.

E.g.
Band.cs ->
using System;
class Band
{
  string Name;
  int Musicians;
  void Announce()
  {
    Console.WriteLine($"Welcome {Name} to the stage");
  }
}


Name, Musicians = instance variables (one set of values for each Object).
New instance of object created by using keyword new.
Protection levels specifed through access speciers, controlls what parts can
be accessed externaly.
public access modifier allows access to everyone.
private access modifier only allows access to members of same class.
Access modifier defaults to private.
Inside Program.cs
static void main(string[] args)
{
  Console.WriteLine("What is the name of your band?");
}

public class Band
{
  public string Name;
  public int Musicians;
  public void Announce()
  {
    Console.WriteLine($"Welcome {Name} to the stage");
  }
}

Program.case:

...
static void Main(string[] args)
{
  Console.WriteLine("What is your band called?");
  Band band = new Band();
  band.Name = Console.ReadLine();
  band.Announce();
}


Level 3, groups of objects

Musician.cs
using System;

public class Musician
{
  public string Name;
  public string Instrument;
  public void Announce()
  {
    Console.WriteLine($"{Name} on the {Instrument} !");
  }
}

Object Initializer allows instantiation and setting of variables in same line.
Musician musician{ Name ="Robert", Instrument ="Guitar"};

C# has multiple containers for storing objects.

Some examples

Array (best used for fixed number of strongly-typed objects)
Musician[] musicians = new musician[2]; (Array of musicians with 2 places);
Musicians[0] = new Musician{Name:"Robert",Instrument:"Guitar"};
Musicians[1] = new Musician(Name: "Sarah", Instrument ="Keyboard");
Arrays can't grow dynamically.

List = container that can grow dynamically.
List<Musician> Musicians = new List<Musicians>;
Musicians.Add(new Musician{Name="Robert",Instrument="Guitar"});
Musicians.Add(new Musician{Name: "Sarah", Instrument ="Keyboard"});
Musicians.Add(new Musician(Name:"Thomas", Instrument = "Drums"}));

List defined in System.Collections.Generic;

Band.cs
{
  using System;
  using System.Collections.Generic;
  public class Band
  {
    public string Name;
    public List<Musician> Musicians = new List<Musicians>();
    public void Announce()
    {
      ...
    }
    public void AddMuscian()
    {
      Musician musician = new Musician(); <--- can also use
                                          var musician = new Musician() to use
                                          infered datatype;
    }
  }
}

Level 4
Loops

Different kinds of looping in C#.
while loop. Runs until condition is false.

while(repeat)
{

}

Foreach loop. loops through group of objects one by one and runs code for each
of them.

foreach(var muscian in Musicians)
{
  Muscian.Announce();
}

Level 5 Method overloads

Overload like C++ can have functions with same name but different signatures.
Return type is not part of method signature. 
