Section 1.

C# = general purpose OOP, relased by MS in 2002.
C# = compiled language, strongly typed, .NET language.

 ________                _______________                   ________
|  C#    |              | Common         |               | Machine  |
| source |  ---->       | Intermediate   |      ---->    | Code     |
|________|              | Language       |               |__________|

Allowed to use any language that is compiled to CIL (VB.net, F# etc).

$ dotnet new console -> Program.cs + cs.proj
(All modern .net applications start with Program.cs).

First C# application
using System;

class Program
{
  static void Main(string[] args) <----Execution starts here.
  {
    Console.WriteLine("Hello World!");
  }

}
Need to do $ dotnet restore before first run/when dependencies change.
$dotnet run to start.

Extended program
class Program
{
  static void Main(string[] args) <----Execution starts here.
  {
    Console.WriteLine("Type a message!");
    Console.WriteLine("You said " +console.readLine());
  }

}

Variables in C#.

using System;
class Program
{
  static void Main(string[] args)
  {
    Console.WriteLine("What is the name of your band?");
    string name = Console.ReadLine();
    Console.WriteLine("How many members are in your band?");
    int numberOfMembers = int.Parse(console.ReadLine());
    Console.WriteLine($"{name} and has {numberOfMembers}
    number of members"");
  }
}

Storing variable = setting/asigning.
Getting value from variable = getting.

Level 3 conditionals in C#.
int.tryParse returns true or false depending on if it was able to parse string to
int.

output parameters = allows setting of variables using keyword out.

static void Main(string[] args)
{
  Console.WriteLine("What is the name of your band?");
  string name = Console.ReadLine();
  Console.WriteLine("How many people are in your band?")
  int numberOfMembers = 0;
  if(!int.tryParse(Console.ReadLine(), out numberOfMembers))
  {
    Console.WriteLine("Input was not valid!");
    Environment.Exit(0);
  }
  Console.WriteLine($"{name} has ${numberOfMembers} members");
}

Methods

Methods = method for breaking up code into logical parts.
Convention, method names use PascalCase.
parameter names typically uses camelCase.
void keyword used for specifying that method does not return anything.

First program with Method.
class program
{
  static void Main(string[] args)
  {
    Console.WriteLine("What is the name of your band");
    string name = Console.readLine();
    AnnounceBand(name);
  }
  void AnnounceBand(string bandName)
  {
    Console.WriteLine($"Welcome {bandName} to the stage");
  }
}
